#!/bin/bash

# Base directory for your ComfyUI instances
ROOT="${ROOT:-/workspace}"
LOG_DIR="${ROOT}/logs"
START_LOG="${LOG_DIR}/start.log"

# Ensure log directory exists
mkdir -p "$LOG_DIR"
chmod 755 "$LOG_DIR"
touch "$START_LOG"
chmod 644 "$START_LOG"

# Source environment variables
if [ -f /etc/environment ]; then
    while IFS='=' read -r key value; do
        if [ -n "$key" ]; then
            # Remove any leading/trailing whitespace and quotes
            key=$(echo "$key" | tr -d '"' | xargs)
            value=$(echo "$value" | tr -d '"' | xargs)
            export "$key=$value"
        fi
    done < /etc/environment
fi

log() {
    local timestamp
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local msg="[MGPU] $*"
    
    # Ensure log directory exists
    if [ ! -d "$LOG_DIR" ]; then
        mkdir -p "$LOG_DIR"
        chmod 755 "$LOG_DIR"
    fi
    
    # Ensure log file exists and is writable
    if [ ! -f "$START_LOG" ]; then
        touch "$START_LOG"
        chmod 644 "$START_LOG"
    fi
    
    if [ -w "$START_LOG" ]; then
        echo "[$timestamp] $msg" | tee -a "$START_LOG" >&2
    else
        echo "[$timestamp] $msg (Warning: Could not write to $START_LOG)" >&2
    fi
}

# Test logging at startup
log "MGPU script starting, log file: $START_LOG"

# Add debug logging at start (only once)
if [ "${DEBUG:-}" = "true" ]; then
    log "Debug: Environment variables at script start:"
    log "NUM_GPUS=${NUM_GPUS:-not set}"
    log "ROOT=$ROOT"
    log "PATH=$PATH"
    log "MOCK_GPU=${MOCK_GPU:-not set}"
fi

# Validate GPU ID
validate_gpu_id() {
    local gpu_id=$1

    # Special case for 'all'
    if [ "$gpu_id" = "all" ]; then
        [ "${DEBUG:-}" = "true" ] && log "Debug: Validating GPU ID: all"
        return 0
    fi

    # Check if gpu_id is a number
    if ! [[ "$gpu_id" =~ ^[0-9]+$ ]]; then
        log "Error: Invalid GPU ID '$gpu_id'. Must be a number or 'all'"
        return 1
    fi

    [ "${DEBUG:-}" = "true" ] && log "Debug: Validating GPU ID: $gpu_id"
    [ "${DEBUG:-}" = "true" ] && log "Debug: Current NUM_GPUS value: $NUM_GPUS"

    # Check if gpu_id is within range
    if [ "$gpu_id" -ge "${NUM_GPUS:-0}" ]; then
        log "Error: GPU ID '$gpu_id' is out of range. Must be between 0 and $((NUM_GPUS-1))"
        return 1
    fi

    return 0
}

# Function to show logs
show_logs() {
    # Check if multitail is available
    if ! command -v multitail >/dev/null 2>&1; then
        log "ERROR: multitail is not installed. Please install it first."
        return 1
    fi

    # Define colors for each GPU
    local colors=("green" "yellow" "blue" "magenta" "cyan" "red" "white" "purple")
    
    # If only one GPU is specified, use tail instead of multitail
    if [ "$#" -eq 1 ] && [ "$1" != "all" ]; then
        local gpu=$1
        # Validate GPU number
        if ! [[ "$gpu" =~ ^[0-9]+$ ]]; then
            log "Error: Invalid GPU ID '$gpu'"
            return 1
        fi
        if [ "$gpu" -ge "${NUM_GPUS:-0}" ]; then
            log "Error: GPU ID '$gpu' is out of range"
            return 1
        fi
        
        local comfy_log="${ROOT}/comfyui_gpu${gpu}/logs/output.log"
        local worker_log="${ROOT}/worker_gpu${gpu}/logs/output.log"
        
        if [ -f "$comfy_log" ] || [ -f "$worker_log" ]; then
            log "Starting log view for GPU $gpu (Ctrl+C to exit)"
            if [ -f "$comfy_log" ]; then
                echo "=== ComfyUI Logs ==="
                tail -f "$comfy_log"
            fi
            if [ -f "$worker_log" ]; then
                echo "=== Worker Logs ==="
                tail -f "$worker_log"
            fi
            return 0
        else
            log "ERROR: Log files not found for GPU $gpu"
            return 1
        fi
    fi
    
    # For multiple GPUs or 'all', use multitail
    if ! command -v multitail >/dev/null 2>&1; then
        log "ERROR: multitail is not installed. Please install it first."
        return 1
    fi

    # Build the multitail command
    local cmd="multitail --mergeall -m 5000"  # 5000 lines of scroll buffer
    
    if [ "$1" = "all" ]; then
        # Show all available GPUs
        for gpu in $(seq 0 $((NUM_GPUS-1))); do
            local comfy_log="${ROOT}/comfyui_gpu${gpu}/logs/output.log"
            local worker_log="${ROOT}/worker_gpu${gpu}/logs/output.log"
            
            if [ -f "$comfy_log" ]; then
                local color_index=$((gpu % ${#colors[@]}))
                cmd="$cmd -ci ${colors[$color_index]} --label \"GPU${gpu} ComfyUI: \" $comfy_log"
            fi
            if [ -f "$worker_log" ]; then
                local color_index=$((gpu % ${#colors[@]}))
                cmd="$cmd -ci ${colors[$color_index]} --label \"GPU${gpu} Worker: \" $worker_log"
            fi
        done
    else
        # Handle specific GPU numbers
        local found_valid=false
        for gpu in "$@"; do
            # Validate GPU number
            if ! [[ "$gpu" =~ ^[0-9]+$ ]]; then
                log "Warning: Invalid GPU ID '$gpu'. Skipping..."
                continue
            fi
            if [ "$gpu" -ge "${NUM_GPUS:-0}" ]; then
                log "Warning: GPU ID '$gpu' is out of range. Skipping..."
                continue
            fi
            
            local comfy_log="${ROOT}/comfyui_gpu${gpu}/logs/output.log"
            local worker_log="${ROOT}/worker_gpu${gpu}/logs/output.log"
            
            if [ -f "$comfy_log" ]; then
                local color_index=$((gpu % ${#colors[@]}))
                cmd="$cmd -ci ${colors[$color_index]} --label \"GPU${gpu} ComfyUI: \" $comfy_log"
                found_valid=true
            fi
            if [ -f "$worker_log" ]; then
                local color_index=$((gpu % ${#colors[@]}))
                cmd="$cmd -ci ${colors[$color_index]} --label \"GPU${gpu} Worker: \" $worker_log"
                found_valid=true
            fi
        done
        
        if [ "$found_valid" = "false" ]; then
            log "ERROR: No valid GPU logs found"
            return 1
        fi
    fi
    
    if [ "$cmd" = "multitail --mergeall -m 5000" ]; then
        log "ERROR: No log files found"
        return 1
    fi
    
    # Execute the multitail command
    log "Starting log view (Press 'b' to scroll, 'q' to exit scroll mode, Ctrl+C to exit)"
    eval "$cmd"
}

# Function to start a specific GPU service
start_service() {
    local gpu_id=$1
    
    if [ "$gpu_id" = "all" ]; then
        start_all_services
        return $?
    fi
    
    log "Starting services for GPU $gpu_id..."
    # Pass test_gpus as third parameter if MOCK_GPU is set
    if [ "${MOCK_GPU:-0}" -eq 1 ]; then
        service comfyui start "$gpu_id" "1" || return 1
        service redis_worker start "$gpu_id" || return 1
    else
        service comfyui start "$gpu_id" || return 1
        service redis_worker start "$gpu_id" || return 1
    fi
}

# Function to start all GPU services
start_all_services() {
    log "Starting all GPU services..."
    local failed=0
    for gpu in $(seq 0 $((NUM_GPUS-1))); do
        # Pass test_gpus as third parameter if MOCK_GPU is set
        if [ "${MOCK_GPU:-0}" -eq 1 ]; then
            start_service "$gpu" || failed=1
        else
            start_service "$gpu" || failed=1
        fi
    done
    return $failed
}

# Function to stop a specific GPU service
stop_service() {
    local gpu_id=$1
    
    if [ "$gpu_id" = "all" ]; then
        stop_all_services
        return
    fi
    
    # Validate GPU ID first (only once)
    validate_gpu_id "$gpu_id" >/dev/null || return 1
    
    log "Stopping services for GPU $gpu_id..."
    service comfyui stop "$gpu_id"
    service redis_worker stop "$gpu_id"
}

# Internal function to stop a service
stop_service_internal() {
    local gpu_id=$1
    service comfyui stop "$gpu_id"
    service redis_worker stop "$gpu_id"
}

# Function to stop all GPU services
stop_all_services() {
    local failed=0
    for gpu in $(seq 0 $((NUM_GPUS-1))); do
        if ! stop_service "$gpu"; then
            failed=1
        fi
    done
    return $failed
}

## Function to restart a specific GPU service
restart_service() {
    local gpu_id=$1
    
    if [ "$gpu_id" = "all" ]; then
        restart_all_services
        return
    fi
    
    # Validate GPU ID first (only once)
    validate_gpu_id "$gpu_id" >/dev/null || return 1
    
    log "Restarting service for GPU $gpu_id..."
    service comfyui restart "$gpu_id"
}

# Function to restart all GPU services
restart_all_services() {
    local failed=0
    for gpu in $(seq 0 $((NUM_GPUS-1))); do
        if ! restart_service "$gpu"; then
            failed=1
        fi
    done
    return $failed
}

# Function to check status of a specific GPU service
check_status() {
    local gpu_id=$1
    
    if [ "$gpu_id" = "all" ]; then
        check_all_status
        return $?
    fi
    
    # Validate GPU ID first (only once)
    validate_gpu_id "$gpu_id" >/dev/null || return 1
    
    # Capture the output of comfyui status
    local status_output
    status_output=$(service comfyui status "$gpu_id" 2>&1)
    local exit_code=$?
    
    # Extract status from the output (matches "Service is running" or "Service is not running")
    if echo "$status_output" | grep -q "Service is running"; then
        printf "GPU %d: %s\n" "$gpu_id" "$(echo "$status_output" | grep "Service is" | sed "s/\[.*\] //")"
        return 0
    else
        printf "GPU %d: %s\n" "$gpu_id" "$(echo "$status_output" | grep "Service is" | sed "s/\[.*\] //")"
        return $exit_code
    fi
}

# Function to check status of all GPU services
check_all_status() {
    local failed=0
    for gpu in $(seq 0 $((NUM_GPUS-1))); do
        if ! check_status "$gpu"; then
            failed=1
        fi
    done
    return $failed
}

# Function to setup a specific GPU
setup_gpu() {
    local gpu_id=$1
    local comfy_dir="${ROOT}/comfyui_gpu${gpu_id}"
    local worker_dir="${ROOT}/worker_gpu${gpu_id}"
    
    log "Setting up GPU $gpu_id..."
    
    # Setup ComfyUI
    if [ ! -d "$comfy_dir" ]; then
        log "Cloning ComfyUI for GPU $gpu_id..."
        git clone "${COMFY_REPO_URL:-https://github.com/comfyanonymous/ComfyUI.git}" "$comfy_dir"
        cd "$comfy_dir"
        pip install -r requirements.txt
    fi
    
    # Setup Worker
    if [ ! -d "$worker_dir" ]; then
        log "Cloning worker for GPU $gpu_id..."
        git clone https://github.com/emprops/emp-redis.git "$worker_dir"
        cd "$worker_dir"
        pip install -r requirements.txt
    fi
    
    # Create log directories
    mkdir -p "${comfy_dir}/logs" "${worker_dir}/logs"
    chmod 755 "${comfy_dir}/logs" "${worker_dir}/logs"
    
    return 0
}

# Function to setup all GPUs
setup_all_gpus() {
    log "Setting up all GPUs..."
    local failed=0
    
    for gpu in $(seq 0 $((NUM_GPUS-1))); do
        if ! setup_gpu "$gpu"; then
            failed=1
        fi
    done
    
    return $failed
}

# Show usage information
show_usage() {
    cat << EOF
Usage: $0 COMMAND [gpu_id] [options]

Commands:
    start   [gpu_id]       Start ComfyUI service for GPU
    stop    [gpu_id]       Stop ComfyUI service for GPU
    restart [gpu_id]       Restart ComfyUI service for GPU
    status  [gpu_id]       Show status of ComfyUI service for GPU
    logs    [gpu_id] [-n]  Show logs for GPU (default: follow mode, -n for no-follow)
    setup   [gpu_id]       Setup ComfyUI for GPU
    count                  Show number of available GPUs

Arguments:
    gpu_id                 GPU ID (0-N) or 'all' for all GPUs
    
Options:
    -n, no-follow         For logs: show recent logs and exit (default: follow mode)

Examples:
    $0 start 0            Start ComfyUI on GPU 0
    $0 start all          Start ComfyUI on all GPUs
    $0 logs 0             Follow logs for GPU 0
    $0 logs all           Follow logs for all GPUs
    $0 logs 0 -n          Show recent logs for GPU 0 and exit
EOF
}

# Function to show GPU count
show_count() {
    if [ "${MOCK_GPU:-0}" = "1" ]; then
        echo "${NUM_GPUS}"
    else
        # Try to get real GPU count from nvidia-smi
        if command -v nvidia-smi >/dev/null 2>&1; then
            nvidia-smi --query-gpu=gpu_name --format=csv,noheader | wc -l
        else
            echo "0"
        fi
    fi
}

# Main command handling
case "$1" in
    start|stop|restart|status|logs|setup|count)
        if [ -z "$2" ] && [ "$1" != "count" ]; then
            show_usage
            exit 1
        fi
        case "$1" in
            start)
                start_service "$2"
                ;;
            stop)
                stop_service "$2"
                ;;
            restart)
                restart_service "$2"
                ;;
            status)
                check_status "$2"
                ;;
            logs)
                if [ -z "$2" ]; then
                    show_logs "all"
                else
                    shift  # Remove 'logs' from arguments
                    show_logs "$@"  # Pass all remaining arguments to show_logs
                fi
                ;;
            setup)
                if [ -z "$2" ]; then
                    echo "Usage: $0 setup <gpu_number|all>"
                    exit 1
                fi
                if [ "$2" = "all" ]; then
                    setup_all_gpus
                else
                    setup_gpu "$2"
                fi
                ;;
            count)
                show_count
                ;;
        esac
        ;;
    *)
        show_usage
        exit 1
        ;;
esac