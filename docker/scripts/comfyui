#!/bin/bash
### BEGIN INIT INFO
# Provides:          comfyui
# Required-Start:    $network
# Required-Stop:     $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start ComfyUI
### END INIT INFO

# Paths
ROOT="${ROOT:-/workspace}"
NUM_GPUS="${NUM_GPUS:-1}"

log() {
    local GPU_ID=$1
    shift
    LOG_DIR="${ROOT}/comfyui_gpu${GPU_ID}/logs"
    DEBUG_LOG="${LOG_DIR}/debug.log"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" >> "$DEBUG_LOG"
}

prepare_logs() {
    local GPU_ID=$1
    LOG_DIR="${ROOT}/comfyui_gpu${GPU_ID}/logs"
    mkdir -p "$LOG_DIR"
    chmod 755 "$LOG_DIR"
}

start() {
    local GPU_ID=$1
    
    # Validate GPU ID
    if ! [[ "$GPU_ID" =~ ^[0-9]+$ ]] || [ "$GPU_ID" -ge "$NUM_GPUS" ]; then
        echo "Error: Invalid GPU ID $GPU_ID. Must be between 0 and $((NUM_GPUS-1))"
        return 1
    fi

    # Set GPU-specific paths
    local GPU_DIR="${ROOT}/comfyui_gpu${GPU_ID}"
    local SCRIPT_PATH="${GPU_DIR}/main.py"
    local PID_FILE="${GPU_DIR}/comfyui.pid"
    local OUTPUT_LOG="${GPU_DIR}/logs/output.log"

    # Prepare log directory
    prepare_logs "$GPU_ID"

    # Extensive logging
    log "$GPU_ID" "=== ComfyUI Service Start Diagnostics ==="
    log "$GPU_ID" "Current User: $(whoami)"
    log "$GPU_ID" "GPU ID: $GPU_ID"
    log "$GPU_ID" "Script Path: $SCRIPT_PATH"
    log "$GPU_ID" "Working Directory: $GPU_DIR"
    log "$GPU_ID" "Log Directory: ${GPU_DIR}/logs"

    # Validate paths
    if [ ! -d "$GPU_DIR" ]; then
        log "$GPU_ID" "ERROR: Working directory does not exist: $GPU_DIR"
        return 1
    fi

    if [ ! -f "$SCRIPT_PATH" ]; then
        log "$GPU_ID" "ERROR: ComfyUI main script not found at $SCRIPT_PATH"
        return 1
    fi
    
    # Verify Python environment
    ACTIVE_PYTHON=$(which python)
    log "$GPU_ID" "Active Python Path: $ACTIVE_PYTHON"
    python --version

    # Set GPU-specific environment variables
    export CUDA_VISIBLE_DEVICES=$GPU_ID
    PORT="${PORT:-$((8188 + GPU_ID))}"

    # Prepare run command
    RUN_COMMAND=(python "$SCRIPT_PATH" --listen 0.0.0.0 --port "$PORT")
    
    # Log the exact command being run
    log "$GPU_ID" "Executing ComfyUI start command: ${RUN_COMMAND[@]}"
    log "$GPU_ID" "Using GPU: $GPU_ID (CUDA_VISIBLE_DEVICES=$CUDA_VISIBLE_DEVICES)"
    log "$GPU_ID" "Port: $PORT"

    # Start ComfyUI
    cd "$GPU_DIR"
    PYTHONUNBUFFERED=1 \
        "${RUN_COMMAND[@]}" >> "$OUTPUT_LOG" 2>&1 &
    local pid=$!

    # Wait a moment to ensure process started
    sleep 2

    # Check if process is running
    if kill -0 "$pid" 2>/dev/null; then
        echo "$pid" > "$PID_FILE"
        log "$GPU_ID" "ComfyUI started with PID $pid. Full command: ${RUN_COMMAND[@]}"
        return 0
    else
        log "$GPU_ID" "Failed to start ComfyUI. Command used: ${RUN_COMMAND[@]}"
        return 1
    fi
}

stop() {
    local GPU_ID=$1
    local GPU_DIR="${ROOT}/comfyui_gpu${GPU_ID}"
    local PID_FILE="${GPU_DIR}/comfyui.pid"

    log "$GPU_ID" "Stopping ComfyUI service for GPU $GPU_ID..."
    
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if kill -0 "$PID" 2>/dev/null; then
            kill "$PID"
            log "$GPU_ID" "Sent termination signal to ComfyUI (PID: $PID)"
        else
            log "$GPU_ID" "No running ComfyUI process found"
        fi
        rm -f "$PID_FILE"
    else
        log "$GPU_ID" "No PID file found"
    fi
}

status() {
    local GPU_ID=$1
    local GPU_DIR="${ROOT}/comfyui_gpu${GPU_ID}"
    local PID_FILE="${GPU_DIR}/comfyui.pid"

    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if kill -0 "$PID" 2>/dev/null; then
            echo "ComfyUI is running on GPU $GPU_ID (PID: $PID)"
            return 0
        else
            echo "ComfyUI is not running on GPU $GPU_ID (stale PID file)"
            return 1
        fi
    else
        echo "ComfyUI is not running on GPU $GPU_ID"
        return 1
    fi
}

case "$1" in
    start)
        if [ -z "$2" ]; then
            echo "Error: GPU ID required"
            echo "Usage: $0 start <GPU_ID>"
            exit 1
        fi
        start "$2"
        ;;
    stop)
        if [ -z "$2" ]; then
            echo "Error: GPU ID required"
            echo "Usage: $0 stop <GPU_ID>"
            exit 1
        fi
        stop "$2"
        ;;
    status)
        if [ -z "$2" ]; then
            echo "Error: GPU ID required"
            echo "Usage: $0 status <GPU_ID>"
            exit 1
        fi
        status "$2"
        ;;
    restart)
        if [ -z "$2" ]; then
            echo "Error: GPU ID required"
            echo "Usage: $0 restart <GPU_ID>"
            exit 1
        fi
        stop "$2"
        start "$2"
        ;;
    *)
        echo "Usage: $0 {start|stop|status|restart} <GPU_ID>"
        exit 1
esac

exit $?