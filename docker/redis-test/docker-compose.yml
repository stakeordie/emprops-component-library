services:
  redis:
    image: redis:6
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    mem_limit: 100m

  queue-api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000"
    volumes:
      - ./queue_api:/app/queue_api
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=DEBUG
    depends_on:
      - redis
    mem_limit: 200m

  # Worker machines - 5 machines with 2 GPUs each
  worker-1:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - MACHINE_ID=test-machine-1
      - MOCK_GPU_COUNT=2
      - WS_HOST=queue-api
      - WS_PORT=8000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MIN_PROCESS_TIME=5
      - MAX_PROCESS_TIME=15
      - PROGRESS_INTERVAL=1.0
    depends_on:
      - queue-api
    mem_limit: 150m

  worker-2:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - MACHINE_ID=test-machine-2
      - MOCK_GPU_COUNT=2
      - WS_HOST=queue-api
      - WS_PORT=8000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MIN_PROCESS_TIME=8
      - MAX_PROCESS_TIME=20
      - PROGRESS_INTERVAL=1.0
    depends_on:
      - queue-api
    mem_limit: 150m

  worker-3:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - MACHINE_ID=test-machine-3
      - MOCK_GPU_COUNT=2
      - WS_HOST=queue-api
      - WS_PORT=8000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MIN_PROCESS_TIME=10
      - MAX_PROCESS_TIME=25
      - PROGRESS_INTERVAL=1.0
    depends_on:
      - queue-api
    mem_limit: 150m

  worker-4:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - MACHINE_ID=test-machine-4
      - MOCK_GPU_COUNT=2
      - WS_HOST=queue-api
      - WS_PORT=8000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MIN_PROCESS_TIME=12
      - MAX_PROCESS_TIME=30
      - PROGRESS_INTERVAL=1.0
    depends_on:
      - queue-api
    mem_limit: 150m

  worker-5:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - MACHINE_ID=test-machine-5
      - MOCK_GPU_COUNT=2
      - WS_HOST=queue-api
      - WS_PORT=8000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MIN_PROCESS_TIME=15
      - MAX_PROCESS_TIME=35
      - PROGRESS_INTERVAL=1.0
    depends_on:
      - queue-api
    mem_limit: 150m

  # Job submitter service
  job-submitter:
    build:
      context: .
      dockerfile: Dockerfile.submitter
    environment:
      - WS_HOST=queue-api
      - WS_PORT=8000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JOB_COUNT=50
      - SUBMISSION_INTERVAL=0.5
      - MAX_PRIORITY=5
      - RESULT_TIMEOUT=600
    depends_on:
      - queue-api
    mem_limit: 150m
      
  # WebSocket test client
  ws-test-client:
    build:
      context: .
      dockerfile: Dockerfile.test-client
    environment:
      - WS_HOST=queue-api
      - WS_PORT=8000
    depends_on:
      - queue-api
    mem_limit: 100m
      
  # Redis Insight - Official Redis GUI tool
  redis-insight:
    image: redislabs/redisinsight:latest
    ports:
      - "8001:8001"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - redis-insight-data:/data
    depends_on:
      - redis
    mem_limit: 200m

  # Redis metrics exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis:6379
    depends_on:
      - redis
    mem_limit: 50m

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      - redis-exporter
    mem_limit: 250m

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    mem_limit: 200m

volumes:
  redis-data:
  redis-insight-data:
  prometheus-data:
  grafana-data:
