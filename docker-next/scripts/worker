#!/bin/bash
### BEGIN INIT INFO
# Provides:          worker
# Required-Start:    $network
# Required-Stop:     $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start Redis Worker
### END INIT INFO

# Paths
ROOT="${ROOT:-/workspace}"
NUM_GPUS="${NUM_GPUS:-0}"  # Default to CPU mode
REDIS_API_HOST="${REDIS_API_HOST:-redis-api}"
REDIS_API_PORT="${REDIS_API_PORT:-8001}"
MACHINE_ID="${MACHINE_ID:-1}"

# Setup logging
setup_logs() {
    local GPU_NUM=$1
    local WORK_DIR="${ROOT}/worker_gpu${GPU_NUM}"
    
    # Create log directories
    mkdir -p "${WORK_DIR}/logs"
    chmod 755 "${WORK_DIR}/logs"
    
    # Create empty log file if it doesn't exist
    touch "${WORK_DIR}/logs/output.log"
    chmod 644 "${WORK_DIR}/logs/output.log"
}

log() {
    local GPU_NUM=$1
    shift
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local msg="[Worker GPU${GPU_NUM}] $*"
    local log_line="[$timestamp] $msg"
    
    # Always write to start.log
    if [ -w "${ROOT}/logs/start.log" ]; then
        echo "$log_line" >> "${ROOT}/logs/start.log"
    else
        echo "WARNING: Cannot write to ${ROOT}/logs/start.log" >&2
    fi
    
    # Write to service-specific logs
    local LOG_DIR="${ROOT}/worker_gpu${GPU_NUM}/logs"
    
    if [ -d "$LOG_DIR" ]; then
        if [ -w "${LOG_DIR}/output.log" ]; then
            echo "$log_line" >> "${LOG_DIR}/output.log"
        else
            echo "WARNING: Cannot write to ${LOG_DIR}/output.log" >&2
        fi
    else
        echo "WARNING: Log directory ${LOG_DIR} does not exist" >&2
    fi
    
    # Also output to stderr
    echo "$msg" >&2
}

start() {
    local GPU_NUM=$1
    local WORK_DIR="${ROOT}/worker_gpu${GPU_NUM}"
    local PID_FILE="${WORK_DIR}/worker.pid"
    local EXECUTION_SERVICE_PORT=$((8188 + GPU_NUM))
    
    # Check if already running
    if [ -f "$PID_FILE" ]; then
        local PID=$(cat "$PID_FILE")
        if ps -p "$PID" > /dev/null 2>&1; then
            log "$GPU_NUM" "Worker is already running with PID $PID"
            return 0
        else
            log "$GPU_NUM" "Stale PID file found, removing"
            rm -f "$PID_FILE"
        fi
    fi
    
    # Setup logs
    setup_logs "$GPU_NUM"
    
    # Check if worker.py exists
    if [ ! -f "${WORK_DIR}/worker.py" ]; then
        log "$GPU_NUM" "ERROR: worker.py not found in $WORK_DIR"
        log "$GPU_NUM" "Please run 'wgpu setup $GPU_NUM' first"
        return 1
    fi
    
    # Set environment variables for worker
    export GPU_ID="$GPU_NUM"
    export EXECUTION_SERVICE_PORT="$EXECUTION_SERVICE_PORT"
    export REDIS_API_HOST="$REDIS_API_HOST"
    export REDIS_API_PORT="$REDIS_API_PORT"
    export MACHINE_ID="$MACHINE_ID"
    
    # Start worker
    log "$GPU_NUM" "Starting worker for GPU $GPU_NUM (connecting to ComfyUI on port $EXECUTION_SERVICE_PORT)..."
    
    # Change to the worker directory
    cd "$WORK_DIR" || {
        log "$GPU_NUM" "ERROR: Could not change to directory $WORK_DIR"
        return 1
    }
    
    # Start worker in background
    python worker.py --worker-id "${MACHINE_ID}-worker-gpu${GPU_NUM}" > "${WORK_DIR}/logs/output.log" 2>&1 &
    local PID=$!
    
    # Save PID
    echo "$PID" > "$PID_FILE"
    
    # Check if process is running
    if ps -p "$PID" > /dev/null 2>&1; then
        log "$GPU_NUM" "Worker started with PID $PID"
        return 0
    else
        log "$GPU_NUM" "ERROR: Worker failed to start"
        return 1
    fi
}

stop() {
    local GPU_NUM=$1
    local WORK_DIR="${ROOT}/worker_gpu${GPU_NUM}"
    local PID_FILE="${WORK_DIR}/worker.pid"
    
    # Check if PID file exists
    if [ ! -f "$PID_FILE" ]; then
        log "$GPU_NUM" "Worker is not running (no PID file)"
        return 0
    fi
    
    # Get PID
    local PID=$(cat "$PID_FILE")
    
    # Check if process is running
    if ! ps -p "$PID" > /dev/null 2>&1; then
        log "$GPU_NUM" "Worker is not running (stale PID file)"
        rm -f "$PID_FILE"
        return 0
    fi
    
    # Stop process
    log "$GPU_NUM" "Stopping worker (PID $PID)..."
    kill "$PID"
    
    # Wait for process to stop
    local TIMEOUT=30
    local COUNT=0
    while ps -p "$PID" > /dev/null 2>&1; do
        sleep 1
        COUNT=$((COUNT + 1))
        if [ "$COUNT" -ge "$TIMEOUT" ]; then
            log "$GPU_NUM" "WARNING: Timeout waiting for worker to stop, forcing kill"
            kill -9 "$PID"
            break
        fi
    done
    
    # Remove PID file
    rm -f "$PID_FILE"
    
    log "$GPU_NUM" "Worker stopped"
    return 0
}

restart() {
    local GPU_NUM=$1
    
    log "$GPU_NUM" "Restarting worker..."
    
    # Stop worker
    stop "$GPU_NUM"
    
    # Wait a moment
    sleep 2
    
    # Start worker
    start "$GPU_NUM"
    
    return $?
}

status() {
    local GPU_NUM=$1
    local WORK_DIR="${ROOT}/worker_gpu${GPU_NUM}"
    local PID_FILE="${WORK_DIR}/worker.pid"
    
    # Check if PID file exists
    if [ ! -f "$PID_FILE" ]; then
        log "$GPU_NUM" "Worker is not running (no PID file)"
        return 1
    fi
    
    # Get PID
    local PID=$(cat "$PID_FILE")
    
    # Check if process is running
    if ps -p "$PID" > /dev/null 2>&1; then
        log "$GPU_NUM" "Worker is running with PID $PID"
        return 0
    else
        log "$GPU_NUM" "Worker is not running (stale PID file)"
        rm -f "$PID_FILE"
        return 1
    fi
}

case "$1" in
    start|stop|status|restart)
        # Set mock mode only if test_gpus is provided and not 0
        if [ -n "$3" ] && [ "$3" != "0" ]; then
            export MOCK_GPU=1
        fi
        
        # Check if GPU_NUM is provided
        if [ -z "$2" ]; then
            echo "Usage: $0 {start|stop|restart|status} <gpu_num>"
            exit 1
        fi
        
        # Run the specified action
        $1 "$2"
        exit $?
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status} <gpu_num>"
        exit 1
        ;;
esac
